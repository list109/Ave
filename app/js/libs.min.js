let dropdown={handleEvent(t){let e=t.target.closest("[data-dropdown]");if(this.box&&!this.box.contains(e)&&this.isDropdown&&this.showDropdown(),!e)return;this.box=e,this.list=e.querySelector("[data-dropdown-list]");let s=e.querySelector("[data-dropdown-btn]");if(!this.list||!s)return;t.preventDefault(),t.target.closest("[data-dropdown-btn]")&&this.showDropdown();let i=t.target.closest("[data-dropdown-item]");i&&this.chooseDropdownItem(i,s)},chooseDropdownItem(t,e){let s=t.innerHTML,i=e.innerHTML;t.innerHTML=i,e.innerHTML=s,this.showDropdown()},showDropdown(){this.isDropdown=parseFloat(this.list.style.height)==this.list.scrollHeight,this.list.style.height=this.isDropdown?"":this.list.scrollHeight+"px",this.isDropdown=!this.isDropdown,this.list.dataset.dropdownList=this.isDropdown}},scrollLineWidth=window.innerWidth-document.documentElement.clientWidth;function menu(t,e){t.onclick=()=>{t.classList.toggle(e),document.body.classList.toggle(t.dataset.bodyClass),document.querySelector(".mobile__top").style.right=t.classList.contains(e)?scrollLineWidth+"px":""}}class Slider{constructor(t,{pointClassName:e,pointsElem:s,time:i,arrowLeft:n,arrowRight:r}){this.sliderLine=t.querySelector("[data-slider-line]"),this.sliderLine&&(this.sliderLine.style.cssText="transform: translateX(0px);",this.pointsElem=s,this.pointClassName=e||"pointClassName",this.pointNumber=0,this.interval,this.time=i,this.isPressed=!1,this.moveWithPressedMouse=this.moveWithPressedMouse.bind(this),parseInt(i)&&this.startTimer(),t.addEventListener("click",this.handleEvent.bind(this)),t.addEventListener("mousedown",this.handleEvent.bind(this)),t.addEventListener("mouseup",this.handleEvent.bind(this)),window.addEventListener("resize",this.reset.bind(this)))}handleEvent(t){let e=t.target.closest("[data-slider-point]");if(e&&"click"==t.type){if(e.classList.contains(this.pointClassName)||t.preventDefault(),e.dataset.sliderPoint-1==this.pointNumber)return;return this.time&&(this.stopTimer(),this.startTimer()),void this.changePoints(e.dataset.sliderPoint-1)}if(t.target.closest("[data-slider-line]"))switch(t.type){case"mousedown":this.startWithPressedMouse(t);break;case"dbclick":case"mouseup":this.endWithPressedMouse(t.clientX)}}moveSlider(t){let e=this.sliderLine.scrollWidth/this.sliderLine.children.length*t;this.sliderLine.style.transform=`translateX(-${e}px)`}changePoints(t){t=t<0?this.sliderLine.children.length-1:t>this.sliderLine.children.length-1?0:t,this.pointsElem&&(this.pointsElem.children[this.pointNumber].classList.remove(this.pointClassName),this.pointsElem.children[t].classList.add(this.pointClassName)),this.pointNumber=t,this.moveSlider(t)}startWithPressedMouse(t){this.isPressed=!0,this.startDistance=t.clientX,this.stopTimer(),this.initialSlide=t.target.closest("[data-slider-item]"),this.initialTransform=+getComputedStyle(this.sliderLine).transform.split(",")[4],this.sliderLine.style.transition="initial",window.addEventListener("mousemove",this.moveWithPressedMouse)}endWithPressedMouse(t){if(!this.isPressed)return;this.isPressed=!1,this.sliderLine.style.transition="";let e=t-this.startDistance;Math.abs(e)<.2*this.sliderLine.offsetWidth?this.sliderLine.style.transform=`translateX(${this.initialTransform}px)`:this.changePoints(e<0?this.pointNumber+1:this.pointNumber-1),window.removeEventListener("mousemove",this.moveWithPressedMouse),this.startTimer()}moveWithPressedMouse(t){let e=t.clientX-this.startDistance,s=this.initialTransform+e,i=-(this.sliderLine.scrollWidth-this.sliderLine.clientWidth);s=s>=0?0:s<=i?i:s,this.sliderLine.style.transform=`translateX(${s}px)`;let n=document.elementFromPoint(t.clientX,t.clientY);this.sliderLine.contains(n)||this.endWithPressedMouse(this.prevClientX),this.prevClientX=t.clientX,t.preventDefault()}startTimer(){this.interval=setInterval(()=>{console.log("setTimeout: "+this.timeout);let t=this.pointNumber+1;this.changePoints(t)},1e3*this.time)}stopTimer(){clearInterval(this.interval)}reset(){this.sliderLine.style.transform="translateX(0px)",this.changePoints(0)}}let submenu={handleEvent(t){(t.type="mouseover")&&this.setSubmenu(t.target),(t.type="mouseout")&&this.removeSubmenu(t.target)},setSubmenu(t){if(this.isSubmenu)return;if(this.menuItem=t.closest("[data-submenu]"),!this.menuItem)return;let e=this.menuItem.querySelector(".submenu");if(!e)return;let s=e.getBoundingClientRect(),i=document.documentElement.clientWidth-(s.left+e.offsetWidth);e.style.left=i<0?i-15+"px":"",this.isSubmenu=!0},removeSubmenu(t){this.isSubmenu&&this.menuItem.contains(t)&&(this.isSubmenu=!1)}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
